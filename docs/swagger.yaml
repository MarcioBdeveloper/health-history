basePath: /api/v1
definitions:
  models.Diagnostic:
    properties:
      createdAt:
        type: string
      description:
        type: string
      doctor_id:
        type: string
      id:
        type: integer
      patient_id:
        type: string
      symptoms:
        items:
          type: string
        type: array
      updatedAt:
        type: string
    required:
    - description
    - doctor_id
    - patient_id
    - symptoms
    type: object
  models.Medication:
    properties:
      activeIngredient:
        type: string
      companyHoldingRegistration:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      registrationNumber:
        type: string
      regulatoryCategory:
        type: string
      therapeuticClass:
        type: string
      updatedAt:
        type: string
    required:
    - activeIngredient
    - companyHoldingRegistration
    - name
    - registrationNumber
    - regulatoryCategory
    - therapeuticClass
    type: object
  models.Person:
    properties:
      age:
        type: integer
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    required:
    - age
    - name
    type: object
  models.Symptom:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    required:
    - name
    type: object
  requests.DiagnosticRequest:
    properties:
      description:
        example: Patient has a mild fever
        type: string
      doctor_id:
        example: "1"
        type: string
      patient_id:
        example: "1"
        type: string
      symptoms:
        example:
        - '[''cough'''
        - ' ''headache'''
        - ' ''fever'']'
        items:
          type: string
        type: array
    required:
    - description
    - doctor_id
    - patient_id
    - symptoms
    type: object
  requests.MedicationRequest:
    properties:
      CompanyHoldingRegistration:
        type: string
      activeIngredient:
        type: string
      name:
        type: string
      registrationNumber:
        type: string
      regulatoryCategory:
        type: string
      therapeuticClass:
        type: string
    required:
    - CompanyHoldingRegistration
    - activeIngredient
    - name
    - registrationNumber
    - regulatoryCategory
    - therapeuticClass
    type: object
  requests.PersonRequest:
    properties:
      age:
        type: integer
      name:
        type: string
    required:
    - age
    - name
    type: object
  requests.SymptomRequest:
    properties:
      name:
        example: fever
        type: string
    required:
    - name
    type: object
host: localhost:8080
info:
  contact: {}
  description: The objective this application is save history medicaments of person.
  title: Health History API
  version: "1.0"
paths:
  /diagnostics:
    get:
      description: Return person list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Diagnostic'
            type: array
      summary: List diagnostics
      tags:
      - diagnostics
    post:
      consumes:
      - application/json
      description: Create a new diagnostic
      parameters:
      - description: Data of diagnostic
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.DiagnosticRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Diagnostic'
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create diagnostic
      tags:
      - diagnostics
  /diagnostics/:id:
    get:
      description: Return diagnostic by id
      parameters:
      - description: Diagnostic ID
        example: 1
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Diagnostic'
        "404":
          description: Diagnostic not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Return diagnostic
      tags:
      - diagnostics
    put:
      consumes:
      - application/json
      description: Update a exist diagnostic
      parameters:
      - description: Data of diagnostic
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.DiagnosticRequest'
      - description: Diagnostic ID
        example: 1
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Diagnostic'
      summary: Update  diagnostic
      tags:
      - diagnostics
  /medications:
    get:
      description: Return medication list
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/models.Medication'
            type: array
      summary: List medications
      tags:
      - medications
    post:
      consumes:
      - application/json
      description: Create a new medication
      parameters:
      - description: Data of medication
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.MedicationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successful response
          schema:
            $ref: '#/definitions/models.Medication'
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create medication
      tags:
      - medications
  /medications/:id:
    get:
      description: Return medication by id
      parameters:
      - description: Medication ID
        example: 1
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/models.Medication'
        "404":
          description: Medication not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Return medication
      tags:
      - medications
    put:
      consumes:
      - application/json
      description: Update a exist medication
      parameters:
      - description: Data of medication
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.MedicationRequest'
      - description: Medication ID
        example: 1
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/models.Medication'
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update  medication
      tags:
      - medications
  /persons:
    get:
      description: Return person list
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/models.Person'
            type: array
      summary: List persons
      tags:
      - persons
    post:
      consumes:
      - application/json
      description: Create a new person
      parameters:
      - description: Data of person
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.PersonRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successful response
          schema:
            $ref: '#/definitions/models.Person'
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create person
      tags:
      - persons
  /persons/:id:
    get:
      description: Return person by id
      parameters:
      - description: Person ID
        example: 1
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/models.Person'
        "404":
          description: Person not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Return person
      tags:
      - persons
    put:
      consumes:
      - application/json
      description: Update a exist person
      parameters:
      - description: Data of person
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.PersonRequest'
      - description: Mdication ID
        example: 1
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/models.Person'
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update  person
      tags:
      - persons
  /symptoms:
    get:
      description: Return person list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Symptom'
            type: array
      summary: List symptoms
      tags:
      - symptoms
    post:
      consumes:
      - application/json
      description: Create a new symptom
      parameters:
      - description: Data of symptom
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.SymptomRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Symptom'
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create symptom
      tags:
      - symptoms
  /symptoms/:id:
    get:
      description: Return symptom by id
      parameters:
      - description: Symptom ID
        example: 1
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Symptom'
        "404":
          description: Symptom not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Return symptom
      tags:
      - symptoms
    put:
      consumes:
      - application/json
      description: Update a exist symptom
      parameters:
      - description: Data of symptom
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.SymptomRequest'
      - description: Symptom ID
        example: 1
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Symptom'
      summary: Update  symptom
      tags:
      - symptoms
swagger: "2.0"
